
balance_car_152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002eb0  08002eb0  00003eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ed4  08002ed4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed4  08002ed4  00003ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ed8  08002ed8  00003ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002edc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002ee8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002ee8  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080de  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016dd  00000000  00000000  0000c113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0000d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e5  00000000  00000000  0000e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157c4  00000000  00000000  0000e7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a86  00000000  00000000  00023fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c01b  00000000  00000000  0002da37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9a52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002580  00000000  00000000  000b9a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bc018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002e98 	.word	0x08002e98

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002e98 	.word	0x08002e98

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <set_direction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_direction(uint8_t fw, uint8_t bk){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
	//right
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, fw);
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	461a      	mov	r2, r3
 800047c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000480:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <set_direction+0x4c>)
 8000482:	f001 fa1d 	bl	80018c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, bk);
 8000486:	79bb      	ldrb	r3, [r7, #6]
 8000488:	461a      	mov	r2, r3
 800048a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800048e:	4809      	ldr	r0, [pc, #36]	@ (80004b4 <set_direction+0x4c>)
 8000490:	f001 fa16 	bl	80018c0 <HAL_GPIO_WritePin>

	//left
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, fw);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	461a      	mov	r2, r3
 8000498:	2102      	movs	r1, #2
 800049a:	4807      	ldr	r0, [pc, #28]	@ (80004b8 <set_direction+0x50>)
 800049c:	f001 fa10 	bl	80018c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, bk);
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	461a      	mov	r2, r3
 80004a4:	2101      	movs	r1, #1
 80004a6:	4804      	ldr	r0, [pc, #16]	@ (80004b8 <set_direction+0x50>)
 80004a8:	f001 fa0a 	bl	80018c0 <HAL_GPIO_WritePin>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40020000 	.word	0x40020000
 80004b8:	40020800 	.word	0x40020800

080004bc <setSpeed>:

void setSpeed(uint16_t input_speed){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = input_speed;
 80004c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2->CCR2 = input_speed;
 80004ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fadd 	bl	8000aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f844 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f966 	bl	80007bc <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f0:	f000 f8e6 	bl	80006c0 <MX_TIM2_Init>
  MX_ADC_Init();
 80004f4:	f000 f88c 	bl	8000610 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004f8:	2104      	movs	r1, #4
 80004fa:	481b      	ldr	r0, [pc, #108]	@ (8000568 <main+0x88>)
 80004fc:	f002 f802 	bl	8002504 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000500:	2100      	movs	r1, #0
 8000502:	4819      	ldr	r0, [pc, #100]	@ (8000568 <main+0x88>)
 8000504:	f001 fffe 	bl	8002504 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc);
 8000508:	4818      	ldr	r0, [pc, #96]	@ (800056c <main+0x8c>)
 800050a:	f000 fca1 	bl	8000e50 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  	  HAL_ADC_PollForConversion(&hadc, 100);
 800050e:	2164      	movs	r1, #100	@ 0x64
 8000510:	4816      	ldr	r0, [pc, #88]	@ (800056c <main+0x8c>)
 8000512:	f000 fcfd 	bl	8000f10 <HAL_ADC_PollForConversion>
	  	  	  readValue = HAL_ADC_GetValue(&hadc);
 8000516:	4815      	ldr	r0, [pc, #84]	@ (800056c <main+0x8c>)
 8000518:	f000 fd8a 	bl	8001030 <HAL_ADC_GetValue>
 800051c:	4603      	mov	r3, r0
 800051e:	4a14      	ldr	r2, [pc, #80]	@ (8000570 <main+0x90>)
 8000520:	6013      	str	r3, [r2, #0]

	  	  	  if (readValue<500){
 8000522:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <main+0x90>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800052a:	d207      	bcs.n	800053c <main+0x5c>
	  			set_direction(1,0);
 800052c:	2100      	movs	r1, #0
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff ff9a 	bl	8000468 <set_direction>
	  			setSpeed(50);
 8000534:	2032      	movs	r0, #50	@ 0x32
 8000536:	f7ff ffc1 	bl	80004bc <setSpeed>
 800053a:	e011      	b.n	8000560 <main+0x80>
	  	  	  }
	  	  	  else if (readValue> 3000){
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <main+0x90>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000544:	4293      	cmp	r3, r2
 8000546:	d907      	bls.n	8000558 <main+0x78>
	  			  set_direction(0,1);
 8000548:	2101      	movs	r1, #1
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ff8c 	bl	8000468 <set_direction>
	  			setSpeed(50);
 8000550:	2032      	movs	r0, #50	@ 0x32
 8000552:	f7ff ffb3 	bl	80004bc <setSpeed>
 8000556:	e003      	b.n	8000560 <main+0x80>
	  	  	  }
	  	  	  else set_direction(0,0);
 8000558:	2100      	movs	r1, #0
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ff84 	bl	8000468 <set_direction>
	  		  HAL_Delay(100); // Delay for a while to see the brightness change
 8000560:	2064      	movs	r0, #100	@ 0x64
 8000562:	f000 fb0d 	bl	8000b80 <HAL_Delay>
	  	  	  HAL_ADC_PollForConversion(&hadc, 100);
 8000566:	e7d2      	b.n	800050e <main+0x2e>
 8000568:	2000007c 	.word	0x2000007c
 800056c:	20000028 	.word	0x20000028
 8000570:	200000bc 	.word	0x200000bc

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	@ 0x48
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2234      	movs	r2, #52	@ 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fc5c 	bl	8002e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000596:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <SystemClock_Config+0x98>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800059e:	4a1b      	ldr	r2, [pc, #108]	@ (800060c <SystemClock_Config+0x98>)
 80005a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005a4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2310      	movs	r3, #16
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005ba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80005c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f990 	bl	80018f0 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d6:	f000 f947 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2101      	movs	r1, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fcac 	bl	8001f50 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005fe:	f000 f933 	bl	8000868 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3748      	adds	r7, #72	@ 0x48
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000620:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000622:	4a26      	ldr	r2, [pc, #152]	@ (80006bc <MX_ADC_Init+0xac>)
 8000624:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000626:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <MX_ADC_Init+0xa8>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <MX_ADC_Init+0xa8>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ADC_Init+0xa8>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000660:	2201      	movs	r2, #1
 8000662:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_ADC_Init+0xa8>)
 800066e:	2210      	movs	r2, #16
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000674:	2200      	movs	r2, #0
 8000676:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_ADC_Init+0xa8>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <MX_ADC_Init+0xa8>)
 8000682:	f000 fa9f 	bl	8000bc4 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800068c:	f000 f8ec 	bl	8000868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000690:	2307      	movs	r3, #7
 8000692:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000694:	2301      	movs	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_ADC_Init+0xa8>)
 80006a2:	f000 fcd1 	bl	8001048 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80006ac:	f000 f8dc 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40012400 	.word	0x40012400

080006c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ea:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80006f2:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 80006f4:	221f      	movs	r2, #31
 80006f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006fe:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 8000700:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000704:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800070c:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000712:	4829      	ldr	r0, [pc, #164]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 8000714:	f001 fe6e 	bl	80023f4 <HAL_TIM_Base_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800071e:	f000 f8a3 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4619      	mov	r1, r3
 800072e:	4822      	ldr	r0, [pc, #136]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 8000730:	f002 f840 	bl	80027b4 <HAL_TIM_ConfigClockSource>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800073a:	f000 f895 	bl	8000868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800073e:	481e      	ldr	r0, [pc, #120]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 8000740:	f001 fe97 	bl	8002472 <HAL_TIM_PWM_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800074a:	f000 f88d 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	4816      	ldr	r0, [pc, #88]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 800075e:	f002 fb11 	bl	8002d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000768:	f000 f87e 	bl	8000868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800076c:	2370      	movs	r3, #112	@ 0x70
 800076e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 8000784:	f001 ff54 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800078e:	f000 f86b 	bl	8000868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	2204      	movs	r2, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 800079a:	f001 ff49 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80007a4:	f000 f860 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <MX_TIM2_Init+0xf8>)
 80007aa:	f000 f8ed 	bl	8000988 <HAL_TIM_MspPostInit>

}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	@ 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000007c 	.word	0x2000007c

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b22      	ldr	r3, [pc, #136]	@ (800085c <MX_GPIO_Init+0xa0>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	4a21      	ldr	r2, [pc, #132]	@ (800085c <MX_GPIO_Init+0xa0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	61d3      	str	r3, [r2, #28]
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_GPIO_Init+0xa0>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_GPIO_Init+0xa0>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <MX_GPIO_Init+0xa0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_GPIO_Init+0xa0>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2103      	movs	r1, #3
 8000806:	4816      	ldr	r0, [pc, #88]	@ (8000860 <MX_GPIO_Init+0xa4>)
 8000808:	f001 f85a 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000812:	4814      	ldr	r0, [pc, #80]	@ (8000864 <MX_GPIO_Init+0xa8>)
 8000814:	f001 f854 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000818:	2303      	movs	r3, #3
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <MX_GPIO_Init+0xa4>)
 8000830:	f000 feb6 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000834:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_GPIO_Init+0xa8>)
 800084e:	f000 fea7 	bl	80015a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40020800 	.word	0x40020800
 8000864:	40020000 	.word	0x40020000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_MspInit+0x58>)
 800087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <HAL_MspInit+0x58>)
 8000880:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000884:	6253      	str	r3, [r2, #36]	@ 0x24
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_MspInit+0x58>)
 8000888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_MspInit+0x58>)
 8000894:	6a1b      	ldr	r3, [r3, #32]
 8000896:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <HAL_MspInit+0x58>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6213      	str	r3, [r2, #32]
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_MspInit+0x58>)
 80008a0:	6a1b      	ldr	r3, [r3, #32]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <HAL_MspInit+0x58>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ae:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <HAL_MspInit+0x58>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80008b6:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <HAL_MspInit+0x58>)
 80008b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a15      	ldr	r2, [pc, #84]	@ (8000944 <HAL_ADC_MspInit+0x74>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d123      	bne.n	800093a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <HAL_ADC_MspInit+0x78>)
 80008f4:	6a1b      	ldr	r3, [r3, #32]
 80008f6:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <HAL_ADC_MspInit+0x78>)
 80008f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fc:	6213      	str	r3, [r2, #32]
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_ADC_MspInit+0x78>)
 8000900:	6a1b      	ldr	r3, [r3, #32]
 8000902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_ADC_MspInit+0x78>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a0e      	ldr	r2, [pc, #56]	@ (8000948 <HAL_ADC_MspInit+0x78>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <HAL_ADC_MspInit+0x78>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000922:	2380      	movs	r3, #128	@ 0x80
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <HAL_ADC_MspInit+0x7c>)
 8000936:	f000 fe33 	bl	80015a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	@ 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40012400 	.word	0x40012400
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000960:	d10b      	bne.n	800097a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_TIM_Base_MspInit+0x34>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000966:	4a07      	ldr	r2, [pc, #28]	@ (8000984 <HAL_TIM_Base_MspInit+0x34>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6253      	str	r3, [r2, #36]	@ 0x24
 800096e:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_TIM_Base_MspInit+0x34>)
 8000970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009a8:	d11b      	bne.n	80009e2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <HAL_TIM_MspPostInit+0x64>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <HAL_TIM_MspPostInit+0x64>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_TIM_MspPostInit+0x64>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP1     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009c2:	2303      	movs	r3, #3
 80009c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <HAL_TIM_MspPostInit+0x68>)
 80009de:	f000 fddf 	bl	80015a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f880 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a58:	f7ff fff8 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480b      	ldr	r0, [pc, #44]	@ (8000a8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a5e:	490c      	ldr	r1, [pc, #48]	@ (8000a90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a60:	4a0c      	ldr	r2, [pc, #48]	@ (8000a94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a74:	4c09      	ldr	r4, [pc, #36]	@ (8000a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 f9e5 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fd2b 	bl	80004e0 <main>
  bx lr
 8000a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a94:	08002edc 	.word	0x08002edc
  ldr r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a9c:	200000c4 	.word	0x200000c4

08000aa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_IRQHandler>

08000aa2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 fd43 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f80e 	bl	8000ad4 <HAL_InitTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	e001      	b.n	8000ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac4:	f7ff fed6 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <HAL_InitTick+0x68>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d022      	beq.n	8000b2e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_InitTick+0x6c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <HAL_InitTick+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fd42 	bl	8001586 <HAL_SYSTICK_Config>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10f      	bne.n	8000b28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d809      	bhi.n	8000b22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	f04f 30ff 	mov.w	r0, #4294967295
 8000b16:	f000 fd1a 	bl	800154e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_InitTick+0x70>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e007      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e004      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e001      	b.n	8000b32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a03      	ldr	r2, [pc, #12]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200000c0 	.word	0x200000c0
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	@ (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	200000c0 	.word	0x200000c0

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff fff0 	bl	8000b6c <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d004      	beq.n	8000ba4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_Delay+0x40>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba4:	bf00      	nop
 8000ba6:	f7ff ffe1 	bl	8000b6c <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d8f7      	bhi.n	8000ba6 <HAL_Delay+0x26>
  {
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008

08000bc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	@ 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e127      	b.n	8000e34 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d115      	bne.n	8000c1e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	4b8e      	ldr	r3, [pc, #568]	@ (8000e3c <HAL_ADC_Init+0x278>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4a8d      	ldr	r2, [pc, #564]	@ (8000e3c <HAL_ADC_Init+0x278>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6213      	str	r3, [r2, #32]
 8000c0c:	4b8b      	ldr	r3, [pc, #556]	@ (8000e3c <HAL_ADC_Init+0x278>)
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fe59 	bl	80008d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 80ff 	bne.w	8000e2a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c34:	f023 0302 	bic.w	r3, r3, #2
 8000c38:	f043 0202 	orr.w	r2, r3, #2
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000c40:	4b7f      	ldr	r3, [pc, #508]	@ (8000e40 <HAL_ADC_Init+0x27c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	497c      	ldr	r1, [pc, #496]	@ (8000e40 <HAL_ADC_Init+0x27c>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000c5a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c62:	4619      	mov	r1, r3
 8000c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c68:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fab3 f383 	clz	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000c7e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c84:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9c:	fab3 f383 	clz	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000ca6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000caa:	4313      	orrs	r3, r2
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cb2:	2b10      	cmp	r3, #16
 8000cb4:	d007      	beq.n	8000cc6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd0:	2b40      	cmp	r3, #64	@ 0x40
 8000cd2:	d04f      	beq.n	8000d74 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ce6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6912      	ldr	r2, [r2, #16]
 8000cec:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8000cf0:	d003      	beq.n	8000cfa <HAL_ADC_Init+0x136>
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6912      	ldr	r2, [r2, #16]
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d102      	bne.n	8000d00 <HAL_ADC_Init+0x13c>
 8000cfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cfe:	e000      	b.n	8000d02 <HAL_ADC_Init+0x13e>
 8000d00:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000d02:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d06:	4313      	orrs	r3, r2
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d125      	bne.n	8000d60 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d114      	bne.n	8000d48 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8000d28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	fa92 f2a2 	rbit	r2, r2
 8000d30:	617a      	str	r2, [r7, #20]
  return result;
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	4093      	lsls	r3, r2
 8000d3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d42:	4313      	orrs	r3, r2
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d46:	e00b      	b.n	8000d60 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4c:	f043 0220 	orr.w	r2, r3, #32
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <HAL_ADC_Init+0x280>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <HAL_ADC_Init+0x284>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d84:	430b      	orrs	r3, r1
 8000d86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d90:	d003      	beq.n	8000d9a <HAL_ADC_Init+0x1d6>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d119      	bne.n	8000dce <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da8:	3b01      	subs	r3, #1
 8000daa:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8000dae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	fa92 f2a2 	rbit	r2, r2
 8000db6:	60fa      	str	r2, [r7, #12]
  return result;
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	fab2 f282 	clz	r2, r2
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	fa03 f202 	lsl.w	r2, r3, r2
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dcc:	e007      	b.n	8000dde <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8000ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_ADC_Init+0x288>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d10b      	bne.n	8000e06 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	f023 0303 	bic.w	r3, r3, #3
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e04:	e014      	b.n	8000e30 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	f023 0312 	bic.w	r3, r3, #18
 8000e0e:	f043 0210 	orr.w	r2, r3, #16
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e1a:	f043 0201 	orr.w	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000e28:	e002      	b.n	8000e30 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3738      	adds	r7, #56	@ 0x38
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40012700 	.word	0x40012700
 8000e44:	fcfc16ff 	.word	0xfcfc16ff
 8000e48:	c0fff189 	.word	0xc0fff189
 8000e4c:	bf80fffe 	.word	0xbf80fffe

08000e50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <HAL_ADC_Start+0x1a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e04e      	b.n	8000f08 <HAL_ADC_Start+0xb8>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fa54 	bl	8001320 <ADC_Enable>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d141      	bne.n	8000f06 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000eac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ec0:	d106      	bne.n	8000ed0 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ec6:	f023 0206 	bic.w	r2, r3, #6
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	651a      	str	r2, [r3, #80]	@ 0x50
 8000ece:	e002      	b.n	8000ed6 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000ee6:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f04:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f2c:	d113      	bne.n	8000f56 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f3c:	d10b      	bne.n	8000f56 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f043 0220 	orr.w	r2, r3, #32
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e068      	b.n	8001028 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f56:	f7ff fe09 	bl	8000b6c <HAL_GetTick>
 8000f5a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f5c:	e021      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d01d      	beq.n	8000fa2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_ADC_PollForConversion+0x6c>
 8000f6c:	f7ff fdfe 	bl	8000b6c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d212      	bcs.n	8000fa2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10b      	bne.n	8000fa2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f043 0204 	orr.w	r2, r3, #4
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e042      	b.n	8001028 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0d6      	beq.n	8000f5e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d104      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f06f 0212 	mvn.w	r2, #18
 8000fc0:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d124      	bne.n	8001026 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d11f      	bne.n	8001026 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fec:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d111      	bne.n	8001026 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x20>
 8001064:	2302      	movs	r3, #2
 8001066:	e14f      	b.n	8001308 <HAL_ADC_ConfigChannel+0x2c0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b06      	cmp	r3, #6
 8001076:	d81c      	bhi.n	80010b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	3b05      	subs	r3, #5
 800108a:	221f      	movs	r2, #31
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	4019      	ands	r1, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b05      	subs	r3, #5
 80010a4:	fa00 f203 	lsl.w	r2, r0, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80010b0:	e07e      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	d81c      	bhi.n	80010f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b23      	subs	r3, #35	@ 0x23
 80010cc:	221f      	movs	r2, #31
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4019      	ands	r1, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3b23      	subs	r3, #35	@ 0x23
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010f2:	e05d      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b12      	cmp	r3, #18
 80010fa:	d81c      	bhi.n	8001136 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	3b41      	subs	r3, #65	@ 0x41
 800110e:	221f      	movs	r2, #31
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	4019      	ands	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	3b41      	subs	r3, #65	@ 0x41
 8001128:	fa00 f203 	lsl.w	r2, r0, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	639a      	str	r2, [r3, #56]	@ 0x38
 8001134:	e03c      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b18      	cmp	r3, #24
 800113c:	d81c      	bhi.n	8001178 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	3b5f      	subs	r3, #95	@ 0x5f
 8001150:	221f      	movs	r2, #31
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	4019      	ands	r1, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b5f      	subs	r3, #95	@ 0x5f
 800116a:	fa00 f203 	lsl.w	r2, r0, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	@ 0x34
 8001176:	e01b      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b7d      	subs	r3, #125	@ 0x7d
 800118a:	221f      	movs	r2, #31
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	4019      	ands	r1, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	3b7d      	subs	r3, #125	@ 0x7d
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b09      	cmp	r3, #9
 80011b6:	d81a      	bhi.n	80011ee <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6959      	ldr	r1, [r3, #20]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	2207      	movs	r2, #7
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	4019      	ands	r1, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	6898      	ldr	r0, [r3, #8]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	fa00 f203 	lsl.w	r2, r0, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	e05d      	b.n	80012aa <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b13      	cmp	r3, #19
 80011f4:	d81c      	bhi.n	8001230 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6919      	ldr	r1, [r3, #16]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	3b1e      	subs	r3, #30
 8001208:	2207      	movs	r2, #7
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	4019      	ands	r1, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	6898      	ldr	r0, [r3, #8]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3b1e      	subs	r3, #30
 8001222:	fa00 f203 	lsl.w	r2, r0, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	e03c      	b.n	80012aa <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b1d      	cmp	r3, #29
 8001236:	d81c      	bhi.n	8001272 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	3b3c      	subs	r3, #60	@ 0x3c
 800124a:	2207      	movs	r2, #7
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6898      	ldr	r0, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	3b3c      	subs	r3, #60	@ 0x3c
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	e01b      	b.n	80012aa <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	3b5a      	subs	r3, #90	@ 0x5a
 8001284:	2207      	movs	r2, #7
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	4019      	ands	r1, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	6898      	ldr	r0, [r3, #8]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	3b5a      	subs	r3, #90	@ 0x5a
 800129e:	fa00 f203 	lsl.w	r2, r0, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d003      	beq.n	80012ba <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012b6:	2b11      	cmp	r3, #17
 80012b8:	d121      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <HAL_ADC_ConfigChannel+0x2cc>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d11b      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_ADC_ConfigChannel+0x2cc>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <HAL_ADC_ConfigChannel+0x2cc>)
 80012cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012d0:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d111      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_ADC_ConfigChannel+0x2d0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <HAL_ADC_ConfigChannel+0x2d4>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9a      	lsrs	r2, r3, #18
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40012700 	.word	0x40012700
 8001318:	20000000 	.word	0x20000000
 800131c:	431bde83 	.word	0x431bde83

08001320 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133a:	2b40      	cmp	r3, #64	@ 0x40
 800133c:	d043      	beq.n	80013c6 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <ADC_Enable+0xb0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a20      	ldr	r2, [pc, #128]	@ (80013d4 <ADC_Enable+0xb4>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9a      	lsrs	r2, r3, #18
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001362:	e002      	b.n	800136a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3b01      	subs	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f9      	bne.n	8001364 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001370:	f7ff fbfc 	bl	8000b6c <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001376:	e01f      	b.n	80013b8 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001378:	f7ff fbf8 	bl	8000b6c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d918      	bls.n	80013b8 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001390:	2b40      	cmp	r3, #64	@ 0x40
 8001392:	d011      	beq.n	80013b8 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001398:	f043 0210 	orr.w	r2, r3, #16
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e007      	b.n	80013c8 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c2:	2b40      	cmp	r3, #64	@ 0x40
 80013c4:	d1d8      	bne.n	8001378 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	431bde83 	.word	0x431bde83

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	@ (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	@ (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	@ (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	@ 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff90 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff49 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff5e 	bl	8001420 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff90 	bl	8001490 <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5f 	bl	800143c <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffb0 	bl	80014f4 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015b6:	e160      	b.n	800187a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8152 	beq.w	8001874 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d005      	beq.n	80015e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d130      	bne.n	800164a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800161e:	2201      	movs	r2, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 0201 	and.w	r2, r3, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b03      	cmp	r3, #3
 8001654:	d017      	beq.n	8001686 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d123      	bne.n	80016da <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0203 	and.w	r2, r3, #3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80ac 	beq.w	8001874 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171c:	4b5e      	ldr	r3, [pc, #376]	@ (8001898 <HAL_GPIO_Init+0x2f8>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a5d      	ldr	r2, [pc, #372]	@ (8001898 <HAL_GPIO_Init+0x2f8>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b5b      	ldr	r3, [pc, #364]	@ (8001898 <HAL_GPIO_Init+0x2f8>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001734:	4a59      	ldr	r2, [pc, #356]	@ (800189c <HAL_GPIO_Init+0x2fc>)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a51      	ldr	r2, [pc, #324]	@ (80018a0 <HAL_GPIO_Init+0x300>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d025      	beq.n	80017ac <HAL_GPIO_Init+0x20c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a50      	ldr	r2, [pc, #320]	@ (80018a4 <HAL_GPIO_Init+0x304>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d01f      	beq.n	80017a8 <HAL_GPIO_Init+0x208>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a4f      	ldr	r2, [pc, #316]	@ (80018a8 <HAL_GPIO_Init+0x308>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d019      	beq.n	80017a4 <HAL_GPIO_Init+0x204>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a4e      	ldr	r2, [pc, #312]	@ (80018ac <HAL_GPIO_Init+0x30c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d013      	beq.n	80017a0 <HAL_GPIO_Init+0x200>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a4d      	ldr	r2, [pc, #308]	@ (80018b0 <HAL_GPIO_Init+0x310>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00d      	beq.n	800179c <HAL_GPIO_Init+0x1fc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a4c      	ldr	r2, [pc, #304]	@ (80018b4 <HAL_GPIO_Init+0x314>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d007      	beq.n	8001798 <HAL_GPIO_Init+0x1f8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a4b      	ldr	r2, [pc, #300]	@ (80018b8 <HAL_GPIO_Init+0x318>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d101      	bne.n	8001794 <HAL_GPIO_Init+0x1f4>
 8001790:	2306      	movs	r3, #6
 8001792:	e00c      	b.n	80017ae <HAL_GPIO_Init+0x20e>
 8001794:	2307      	movs	r3, #7
 8001796:	e00a      	b.n	80017ae <HAL_GPIO_Init+0x20e>
 8001798:	2305      	movs	r3, #5
 800179a:	e008      	b.n	80017ae <HAL_GPIO_Init+0x20e>
 800179c:	2304      	movs	r3, #4
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x20e>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e004      	b.n	80017ae <HAL_GPIO_Init+0x20e>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x20e>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_GPIO_Init+0x20e>
 80017ac:	2300      	movs	r3, #0
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017be:	4937      	ldr	r1, [pc, #220]	@ (800189c <HAL_GPIO_Init+0x2fc>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017cc:	4b3b      	ldr	r3, [pc, #236]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f0:	4a32      	ldr	r2, [pc, #200]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f6:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800181a:	4a28      	ldr	r2, [pc, #160]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001820:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001844:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800186e:	4a13      	ldr	r2, [pc, #76]	@ (80018bc <HAL_GPIO_Init+0x31c>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	f47f ae97 	bne.w	80015b8 <HAL_GPIO_Init+0x18>
  }
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40010000 	.word	0x40010000
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40010400 	.word	0x40010400

080018c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80018dc:	e003      	b.n	80018e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	041a      	lsls	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	619a      	str	r2, [r3, #24]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e31d      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001902:	4b94      	ldr	r3, [pc, #592]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800190c:	4b91      	ldr	r3, [pc, #580]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001914:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d07b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b08      	cmp	r3, #8
 8001926:	d006      	beq.n	8001936 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d10f      	bne.n	800194e <HAL_RCC_OscConfig+0x5e>
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001934:	d10b      	bne.n	800194e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001936:	4b87      	ldr	r3, [pc, #540]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d06a      	beq.n	8001a18 <HAL_RCC_OscConfig+0x128>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d166      	bne.n	8001a18 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e2f7      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d106      	bne.n	8001964 <HAL_RCC_OscConfig+0x74>
 8001956:	4b7f      	ldr	r3, [pc, #508]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e02d      	b.n	80019c0 <HAL_RCC_OscConfig+0xd0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10c      	bne.n	8001986 <HAL_RCC_OscConfig+0x96>
 800196c:	4b79      	ldr	r3, [pc, #484]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a78      	ldr	r2, [pc, #480]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b76      	ldr	r3, [pc, #472]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a75      	ldr	r2, [pc, #468]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e01c      	b.n	80019c0 <HAL_RCC_OscConfig+0xd0>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b05      	cmp	r3, #5
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0xb8>
 800198e:	4b71      	ldr	r3, [pc, #452]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a70      	ldr	r2, [pc, #448]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6d      	ldr	r2, [pc, #436]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xd0>
 80019a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a69      	ldr	r2, [pc, #420]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b67      	ldr	r3, [pc, #412]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a66      	ldr	r2, [pc, #408]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8d0 	bl	8000b6c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f8cc 	bl	8000b6c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	@ 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2ad      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xe0>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f8bc 	bl	8000b6c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f8b8 	bl	8000b6c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e299      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a0a:	4b52      	ldr	r3, [pc, #328]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x108>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d05a      	beq.n	8001adc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_OscConfig+0x176>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d116      	bne.n	8001a66 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a38:	4b46      	ldr	r3, [pc, #280]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_OscConfig+0x160>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e276      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b40      	ldr	r3, [pc, #256]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	493d      	ldr	r1, [pc, #244]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a64:	e03a      	b.n	8001adc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d020      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f87a 	bl	8000b6c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f876 	bl	8000b6c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e257      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a8e:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	492a      	ldr	r1, [pc, #168]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
 8001aae:	e015      	b.n	8001adc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f859 	bl	8000b6c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff f855 	bl	8000b6c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e236      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ad0:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80b8 	beq.w	8001c5a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d170      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_OscConfig+0x218>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e21a      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d921      	bls.n	8001b5c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fc09 	bl	8002334 <RCC_SetFlashLatencyFromMSIRange>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e208      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4906      	ldr	r1, [pc, #24]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	061b      	lsls	r3, r3, #24
 8001b4c:	4901      	ldr	r1, [pc, #4]	@ (8001b54 <HAL_RCC_OscConfig+0x264>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
 8001b52:	e020      	b.n	8001b96 <HAL_RCC_OscConfig+0x2a6>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5c:	4b99      	ldr	r3, [pc, #612]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4996      	ldr	r1, [pc, #600]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6e:	4b95      	ldr	r3, [pc, #596]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	061b      	lsls	r3, r3, #24
 8001b7c:	4991      	ldr	r1, [pc, #580]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fbd4 	bl	8002334 <RCC_SetFlashLatencyFromMSIRange>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1d3      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	0b5b      	lsrs	r3, r3, #13
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ba6:	4a87      	ldr	r2, [pc, #540]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ba8:	6892      	ldr	r2, [r2, #8]
 8001baa:	0912      	lsrs	r2, r2, #4
 8001bac:	f002 020f 	and.w	r2, r2, #15
 8001bb0:	4985      	ldr	r1, [pc, #532]	@ (8001dc8 <HAL_RCC_OscConfig+0x4d8>)
 8001bb2:	5c8a      	ldrb	r2, [r1, r2]
 8001bb4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bb6:	4a85      	ldr	r2, [pc, #532]	@ (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bba:	4b85      	ldr	r3, [pc, #532]	@ (8001dd0 <HAL_RCC_OscConfig+0x4e0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ff88 	bl	8000ad4 <HAL_InitTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d045      	beq.n	8001c5a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	e1b5      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d029      	beq.n	8001c2e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bda:	4b7e      	ldr	r3, [pc, #504]	@ (8001dd4 <HAL_RCC_OscConfig+0x4e4>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7fe ffc4 	bl	8000b6c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be8:	f7fe ffc0 	bl	8000b6c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1a1      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bfa:	4b72      	ldr	r3, [pc, #456]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c06:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	496c      	ldr	r1, [pc, #432]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c18:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	4967      	ldr	r1, [pc, #412]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c2e:	4b69      	ldr	r3, [pc, #420]	@ (8001dd4 <HAL_RCC_OscConfig+0x4e4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7fe ff9a 	bl	8000b6c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c3c:	f7fe ff96 	bl	8000b6c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e177      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d030      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd8 <HAL_RCC_OscConfig+0x4e8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7fe ff7a 	bl	8000b6c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7fe ff76 	bl	8000b6c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e157      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x38c>
 8001c9a:	e015      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd8 <HAL_RCC_OscConfig+0x4e8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7fe ff63 	bl	8000b6c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001caa:	f7fe ff5f 	bl	8000b6c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e140      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cbc:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80b5 	beq.w	8001e40 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b37      	ldr	r3, [pc, #220]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	4a36      	ldr	r2, [pc, #216]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <HAL_RCC_OscConfig+0x4ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b33      	ldr	r3, [pc, #204]	@ (8001ddc <HAL_RCC_OscConfig+0x4ec>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a32      	ldr	r2, [pc, #200]	@ (8001ddc <HAL_RCC_OscConfig+0x4ec>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe ff27 	bl	8000b6c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7fe ff23 	bl	8000b6c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	@ 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e104      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <HAL_RCC_OscConfig+0x4ec>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x466>
 8001d48:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d52:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x4c2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x488>
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d62:	4a18      	ldr	r2, [pc, #96]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d68:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6e:	4a15      	ldr	r2, [pc, #84]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d74:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x4c2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4aa>
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d84:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d90:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d96:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x4c2>
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001da4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001daa:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <HAL_RCC_OscConfig+0x4d4>)
 8001dac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001db0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d024      	beq.n	8001e04 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7fe fed7 	bl	8000b6c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc0:	e019      	b.n	8001df6 <HAL_RCC_OscConfig+0x506>
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08002ebc 	.word	0x08002ebc
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	42470020 	.word	0x42470020
 8001dd8:	42470680 	.word	0x42470680
 8001ddc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7fe fec4 	bl	8000b6c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0a3      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df6:	4b54      	ldr	r3, [pc, #336]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ee      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4f0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe feb2 	bl	8000b6c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7fe feae 	bl	8000b6c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e08d      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e22:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	4a43      	ldr	r2, [pc, #268]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d079      	beq.n	8001f3c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d056      	beq.n	8001efc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d13b      	bne.n	8001ece <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_OscConfig+0x65c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fe86 	bl	8000b6c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7fe fe82 	bl	8000b6c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e063      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e76:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e82:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	4319      	orrs	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	492b      	ldr	r1, [pc, #172]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_RCC_OscConfig+0x65c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fe61 	bl	8000b6c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe fe5d 	bl	8000b6c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e03e      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec0:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x5be>
 8001ecc:	e036      	b.n	8001f3c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_RCC_OscConfig+0x65c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fe4a 	bl	8000b6c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fe46 	bl	8000b6c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e027      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x5ec>
 8001efa:	e01f      	b.n	8001f3c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e01a      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_RCC_OscConfig+0x658>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470060 	.word	0x42470060

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e11a      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b8f      	ldr	r3, [pc, #572]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d919      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x34>
 8001f78:	4b8a      	ldr	r3, [pc, #552]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a89      	ldr	r2, [pc, #548]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b87      	ldr	r3, [pc, #540]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0201 	bic.w	r2, r3, #1
 8001f8c:	4985      	ldr	r1, [pc, #532]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	4b83      	ldr	r3, [pc, #524]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0f9      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	497a      	ldr	r1, [pc, #488]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 808e 	beq.w	80020ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fda:	4b73      	ldr	r3, [pc, #460]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d121      	bne.n	800202a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0d7      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d115      	bne.n	800202a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0cb      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800200a:	4b67      	ldr	r3, [pc, #412]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0bf      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800201a:	4b63      	ldr	r3, [pc, #396]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0b7      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b5f      	ldr	r3, [pc, #380]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	495c      	ldr	r1, [pc, #368]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7fe fd96 	bl	8000b6c <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d112      	bne.n	8002070 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7fe fd8e 	bl	8000b6c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e09b      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002062:	4b51      	ldr	r3, [pc, #324]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	d1ee      	bne.n	800204c <HAL_RCC_ClockConfig+0xfc>
 800206e:	e03e      	b.n	80020ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d112      	bne.n	800209e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe fd77 	bl	8000b6c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e084      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002090:	4b45      	ldr	r3, [pc, #276]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_ClockConfig+0x12a>
 800209c:	e027      	b.n	80020ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d11d      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe fd60 	bl	8000b6c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06d      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b3a      	ldr	r3, [pc, #232]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d1ee      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x158>
 80020ca:	e010      	b.n	80020ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe fd4e 	bl	8000b6c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e05b      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020e2:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ee      	bne.n	80020cc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ee:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d219      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <HAL_RCC_ClockConfig+0x1be>
 8002102:	4b28      	ldr	r3, [pc, #160]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0201 	bic.w	r2, r3, #1
 8002116:	4923      	ldr	r1, [pc, #140]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <HAL_RCC_ClockConfig+0x254>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e034      	b.n	800219a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4917      	ldr	r1, [pc, #92]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	490f      	ldr	r1, [pc, #60]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800216e:	f000 f823 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002172:	4602      	mov	r2, r0
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <HAL_RCC_ClockConfig+0x258>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	490b      	ldr	r1, [pc, #44]	@ (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_RCC_ClockConfig+0x264>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fca0 	bl	8000ad4 <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
 8002196:	72fb      	strb	r3, [r7, #11]

  return status;
 8002198:	7afb      	ldrb	r3, [r7, #11]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023c00 	.word	0x40023c00
 80021a8:	40023800 	.word	0x40023800
 80021ac:	08002ebc 	.word	0x08002ebc
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021bc:	b08e      	sub	sp, #56	@ 0x38
 80021be:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80021c0:	4b58      	ldr	r3, [pc, #352]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x16c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	d00d      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x34>
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	f200 8092 	bhi.w	80022fa <HAL_RCC_GetSysClockFreq+0x142>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x28>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x2e>
 80021de:	e08c      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b51      	ldr	r3, [pc, #324]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x170>)
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80021e4:	e097      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e6:	4b51      	ldr	r3, [pc, #324]	@ (800232c <HAL_RCC_GetSysClockFreq+0x174>)
 80021e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80021ea:	e094      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x178>)
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fc:	0d9b      	lsrs	r3, r3, #22
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	3301      	adds	r3, #1
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d021      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002214:	2200      	movs	r2, #0
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	61fa      	str	r2, [r7, #28]
 800221a:	4b44      	ldr	r3, [pc, #272]	@ (800232c <HAL_RCC_GetSysClockFreq+0x174>)
 800221c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002220:	464a      	mov	r2, r9
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	2300      	movs	r3, #0
 8002228:	4644      	mov	r4, r8
 800222a:	fb04 f303 	mul.w	r3, r4, r3
 800222e:	4413      	add	r3, r2
 8002230:	4a3e      	ldr	r2, [pc, #248]	@ (800232c <HAL_RCC_GetSysClockFreq+0x174>)
 8002232:	4644      	mov	r4, r8
 8002234:	fba4 0102 	umull	r0, r1, r4, r2
 8002238:	440b      	add	r3, r1
 800223a:	4619      	mov	r1, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	2200      	movs	r2, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	617a      	str	r2, [r7, #20]
 8002244:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002248:	f7fd ff98 	bl	800017c <__aeabi_uldivmod>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4613      	mov	r3, r2
 8002252:	637b      	str	r3, [r7, #52]	@ 0x34
 8002254:	e04e      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	2200      	movs	r2, #0
 800225a:	469a      	mov	sl, r3
 800225c:	4693      	mov	fp, r2
 800225e:	4652      	mov	r2, sl
 8002260:	465b      	mov	r3, fp
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002270:	0150      	lsls	r0, r2, #5
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	ebb2 080a 	subs.w	r8, r2, sl
 800227a:	eb63 090b 	sbc.w	r9, r3, fp
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800228a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800228e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002292:	ebb2 0408 	subs.w	r4, r2, r8
 8002296:	eb63 0509 	sbc.w	r5, r3, r9
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	00eb      	lsls	r3, r5, #3
 80022a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a8:	00e2      	lsls	r2, r4, #3
 80022aa:	4614      	mov	r4, r2
 80022ac:	461d      	mov	r5, r3
 80022ae:	eb14 030a 	adds.w	r3, r4, sl
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	eb45 030b 	adc.w	r3, r5, fp
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c6:	4629      	mov	r1, r5
 80022c8:	028b      	lsls	r3, r1, #10
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	4604      	mov	r4, r0
 80022d0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80022d4:	4601      	mov	r1, r0
 80022d6:	028a      	lsls	r2, r1, #10
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	2200      	movs	r2, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e8:	f7fd ff48 	bl	800017c <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 80022f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80022f8:	e00d      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x16c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0b5b      	lsrs	r3, r3, #13
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	3301      	adds	r3, #1
 800230a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002318:	4618      	mov	r0, r3
 800231a:	3738      	adds	r7, #56	@ 0x38
 800231c:	46bd      	mov	sp, r7
 800231e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	00f42400 	.word	0x00f42400
 800232c:	016e3600 	.word	0x016e3600
 8002330:	08002eb0 	.word	0x08002eb0

08002334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002340:	4b29      	ldr	r3, [pc, #164]	@ (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d12c      	bne.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800234c:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002358:	4b24      	ldr	r3, [pc, #144]	@ (80023ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e016      	b.n	8002392 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	4a1f      	ldr	r2, [pc, #124]	@ (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236e:	6253      	str	r3, [r2, #36]	@ 0x24
 8002370:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002384:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800238c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002390:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002398:	d105      	bne.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80023a0:	d101      	bne.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80023a2:	2301      	movs	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80023ac:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0f      	ldr	r2, [pc, #60]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0201 	bic.w	r2, r3, #1
 80023c0:	490b      	ldr	r1, [pc, #44]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000
 80023f0:	40023c00 	.word	0x40023c00

080023f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e031      	b.n	800246a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fa98 	bl	8000950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 fa86 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e031      	b.n	80024e8 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f829 	bl	80024f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f000 fa47 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_TIM_PWM_Start+0x24>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e022      	b.n	800256e <HAL_TIM_PWM_Start+0x6a>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d109      	bne.n	8002542 <HAL_TIM_PWM_Start+0x3e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	e015      	b.n	800256e <HAL_TIM_PWM_Start+0x6a>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d109      	bne.n	800255c <HAL_TIM_PWM_Start+0x58>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e008      	b.n	800256e <HAL_TIM_PWM_Start+0x6a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e051      	b.n	800261a <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start+0x82>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002584:	e013      	b.n	80025ae <HAL_TIM_PWM_Start+0xaa>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d104      	bne.n	8002596 <HAL_TIM_PWM_Start+0x92>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002594:	e00b      	b.n	80025ae <HAL_TIM_PWM_Start+0xaa>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d104      	bne.n	80025a6 <HAL_TIM_PWM_Start+0xa2>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80025a4:	e003      	b.n	80025ae <HAL_TIM_PWM_Start+0xaa>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fbbf 	bl	8002d3a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c4:	d00e      	beq.n	80025e4 <HAL_TIM_PWM_Start+0xe0>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a16      	ldr	r2, [pc, #88]	@ (8002624 <HAL_TIM_PWM_Start+0x120>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_TIM_PWM_Start+0xe0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <HAL_TIM_PWM_Start+0x124>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_TIM_PWM_Start+0xe0>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a13      	ldr	r2, [pc, #76]	@ (800262c <HAL_TIM_PWM_Start+0x128>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d111      	bne.n	8002608 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d010      	beq.n	8002618 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002606:	e007      	b.n	8002618 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800
 800262c:	40010800 	.word	0x40010800

08002630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800264a:	2302      	movs	r3, #2
 800264c:	e0ae      	b.n	80027ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	f200 809f 	bhi.w	800279c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800265e:	a201      	add	r2, pc, #4	@ (adr r2, 8002664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002699 	.word	0x08002699
 8002668:	0800279d 	.word	0x0800279d
 800266c:	0800279d 	.word	0x0800279d
 8002670:	0800279d 	.word	0x0800279d
 8002674:	080026d9 	.word	0x080026d9
 8002678:	0800279d 	.word	0x0800279d
 800267c:	0800279d 	.word	0x0800279d
 8002680:	0800279d 	.word	0x0800279d
 8002684:	0800271b 	.word	0x0800271b
 8002688:	0800279d 	.word	0x0800279d
 800268c:	0800279d 	.word	0x0800279d
 8002690:	0800279d 	.word	0x0800279d
 8002694:	0800275b 	.word	0x0800275b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f9c0 	bl	8002a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0208 	orr.w	r2, r2, #8
 80026b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0204 	bic.w	r2, r2, #4
 80026c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6999      	ldr	r1, [r3, #24]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	619a      	str	r2, [r3, #24]
      break;
 80026d6:	e064      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f9dc 	bl	8002a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6999      	ldr	r1, [r3, #24]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	021a      	lsls	r2, r3, #8
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	619a      	str	r2, [r3, #24]
      break;
 8002718:	e043      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f9f9 	bl	8002b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0208 	orr.w	r2, r2, #8
 8002734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0204 	bic.w	r2, r2, #4
 8002744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69d9      	ldr	r1, [r3, #28]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	61da      	str	r2, [r3, #28]
      break;
 8002758:	e023      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fa16 	bl	8002b92 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69d9      	ldr	r1, [r3, #28]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	61da      	str	r2, [r3, #28]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
      break;
 80027a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_ConfigClockSource+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0b4      	b.n	800293a <HAL_TIM_ConfigClockSource+0x186>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002808:	d03e      	beq.n	8002888 <HAL_TIM_ConfigClockSource+0xd4>
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800280e:	f200 8087 	bhi.w	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002816:	f000 8086 	beq.w	8002926 <HAL_TIM_ConfigClockSource+0x172>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281e:	d87f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b70      	cmp	r3, #112	@ 0x70
 8002822:	d01a      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xa6>
 8002824:	2b70      	cmp	r3, #112	@ 0x70
 8002826:	d87b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b60      	cmp	r3, #96	@ 0x60
 800282a:	d050      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x11a>
 800282c:	2b60      	cmp	r3, #96	@ 0x60
 800282e:	d877      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b50      	cmp	r3, #80	@ 0x50
 8002832:	d03c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xfa>
 8002834:	2b50      	cmp	r3, #80	@ 0x50
 8002836:	d873      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b40      	cmp	r3, #64	@ 0x40
 800283a:	d058      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x13a>
 800283c:	2b40      	cmp	r3, #64	@ 0x40
 800283e:	d86f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b30      	cmp	r3, #48	@ 0x30
 8002842:	d064      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002844:	2b30      	cmp	r3, #48	@ 0x30
 8002846:	d86b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b20      	cmp	r3, #32
 800284a:	d060      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b20      	cmp	r3, #32
 800284e:	d867      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05c      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b10      	cmp	r3, #16
 8002856:	d05a      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002858:	e062      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800286a:	f000 fa47 	bl	8002cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800287c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	609a      	str	r2, [r3, #8]
      break;
 8002886:	e04f      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	f000 fa30 	bl	8002cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028aa:	609a      	str	r2, [r3, #8]
      break;
 80028ac:	e03c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 f9a7 	bl	8002c0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2150      	movs	r1, #80	@ 0x50
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f9fe 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 80028cc:	e02c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f9c5 	bl	8002c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2160      	movs	r1, #96	@ 0x60
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f9ee 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 80028ec:	e01c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f987 	bl	8002c0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2140      	movs	r1, #64	@ 0x40
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f9de 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 800290c:	e00c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 f9d5 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 800291e:	e003      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e000      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295a:	d00f      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <TIM_Base_SetConfig+0xc8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00b      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2a      	ldr	r2, [pc, #168]	@ (8002a10 <TIM_Base_SetConfig+0xcc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a29      	ldr	r2, [pc, #164]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a28      	ldr	r2, [pc, #160]	@ (8002a18 <TIM_Base_SetConfig+0xd4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002994:	d017      	beq.n	80029c6 <TIM_Base_SetConfig+0x82>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1c      	ldr	r2, [pc, #112]	@ (8002a0c <TIM_Base_SetConfig+0xc8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <TIM_Base_SetConfig+0x82>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a10 <TIM_Base_SetConfig+0xcc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00f      	beq.n	80029c6 <TIM_Base_SetConfig+0x82>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <TIM_Base_SetConfig+0x82>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a19      	ldr	r2, [pc, #100]	@ (8002a18 <TIM_Base_SetConfig+0xd4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_Base_SetConfig+0x82>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a18      	ldr	r2, [pc, #96]	@ (8002a1c <TIM_Base_SetConfig+0xd8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <TIM_Base_SetConfig+0x82>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a17      	ldr	r2, [pc, #92]	@ (8002a20 <TIM_Base_SetConfig+0xdc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	615a      	str	r2, [r3, #20]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40000c00 	.word	0x40000c00
 8002a18:	40010800 	.word	0x40010800
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	40011000 	.word	0x40011000

08002a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 0201 	bic.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 0302 	bic.w	r3, r3, #2
 8002a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	621a      	str	r2, [r3, #32]
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f023 0210 	bic.w	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0320 	bic.w	r3, r3, #32
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	621a      	str	r2, [r3, #32]
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bc0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	031b      	lsls	r3, r3, #12
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b087      	sub	sp, #28
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f023 0201 	bic.w	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f023 030a 	bic.w	r3, r3, #10
 8002c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	621a      	str	r2, [r3, #32]
}
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f023 0210 	bic.w	r2, r3, #16
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	031b      	lsls	r3, r3, #12
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f043 0307 	orr.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	609a      	str	r2, [r3, #8]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	609a      	str	r2, [r3, #8]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b087      	sub	sp, #28
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	621a      	str	r2, [r3, #32]
}
 8002d78:	bf00      	nop
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e046      	b.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dde:	d00e      	beq.n	8002dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a12      	ldr	r2, [pc, #72]	@ (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a10      	ldr	r2, [pc, #64]	@ (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10c      	bne.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40010800 	.word	0x40010800

08002e40 <memset>:
 8002e40:	4603      	mov	r3, r0
 8002e42:	4402      	add	r2, r0
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d100      	bne.n	8002e4a <memset+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4e:	e7f9      	b.n	8002e44 <memset+0x4>

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	2600      	movs	r6, #0
 8002e54:	4d0c      	ldr	r5, [pc, #48]	@ (8002e88 <__libc_init_array+0x38>)
 8002e56:	4c0d      	ldr	r4, [pc, #52]	@ (8002e8c <__libc_init_array+0x3c>)
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	f000 f81a 	bl	8002e98 <_init>
 8002e64:	2600      	movs	r6, #0
 8002e66:	4d0a      	ldr	r5, [pc, #40]	@ (8002e90 <__libc_init_array+0x40>)
 8002e68:	4c0a      	ldr	r4, [pc, #40]	@ (8002e94 <__libc_init_array+0x44>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	08002ed4 	.word	0x08002ed4
 8002e8c:	08002ed4 	.word	0x08002ed4
 8002e90:	08002ed4 	.word	0x08002ed4
 8002e94:	08002ed8 	.word	0x08002ed8

08002e98 <_init>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_fini>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr
